/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/dAAEQKeVkkX
 */
import Link from "next/link";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { RoughNotation } from "react-rough-notation";
import { useInView } from "react-intersection-observer";
import { useState, ChangeEvent, MouseEvent } from "react";

const row1Items = [
  { name: "Python", Icon: PythonIcon },
  { name: "React", Icon: ReactIcon },
  { name: "SQL", Icon: CodeIcon },
  { name: "Git", Icon: GithubIcon },
  { name: "C", Icon: CIcon },
];

const row2Items = [
  { name: "TypeScript/JavaScript", Icon: JavaSciptIcon },
  { name: "NestJS", Icon: NestJSIcon },
  { name: "Kubernetes", Icon: KubernetesIcon },
  { name: "Next.js", Icon: NavigationIcon },
  { name: "TypeScript", Icon: TypeIcon },
];

const modules = [
  { name: "Computer systems architecture 1 & 2", mark: 81 },
  { name: "Discrete mathematics and database", mark: 95 },
  { name: "Principles of programming 1 & 2", mark: 81 },
  { name: "Mathematics for computation", mark: 76 },
  { name: "Artificial intelligence", mark: 84 },
  { name: "Software processes and modelling", mark: 68 },
];

export default function Homepage() {
  const initialDelay = 500;
  const delayConst = 1000;

  const delayTiming = (index: number) => {
    return initialDelay + index * delayConst;
  };

  const [ref, inView] = useInView({
    triggerOnce: true, // Change this to false if you want the animation to trigger again whenever it comes in view
  });

  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const [open, setOpen] = useState(false);

  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {
    setName(event.target.value);
  };

  const handleEmailChange = (event: ChangeEvent<HTMLInputElement>) => {
    setEmail(event.target.value);
  };

  const handleMsgChange = (event: ChangeEvent<HTMLTextAreaElement>) => {
    setMessage(event.target.value);
  };

  const handleSubmit = async (event: any) => {
    event.preventDefault();
    const requestBody = JSON.stringify({ name, email, message });
    const response = await fetch("/api/sendEmail", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: requestBody,
    });

    if (response.ok) {
      console.log("Email sent successfully");
    } else {
      console.log(response);
      console.log("Error sending email");
    }
  };

  return (
    <>
      <div className="bg-gray-50 dark:bg-gray-900 py-12 pt-16 lg:py-24 xl:py-32 px-2">
        <div className="container px-4 md:px-6">
          <div className="grid gap-6 md:gap-8 lg:gap-10">
            <div className="space-y-2">
              <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                üëã I‚Äôm Solomon Wheeler
              </h1>
              <h6 className="inline text-lg font-semibold">
                Full Stack Developer
              </h6>
            </div>
            <div className="space-y-4">
              <p className="text-gray-500 md:text-xl/relaxed dark:text-gray-400">
                {" "}
                An{" "}
                <RoughNotation
                  type="box"
                  color="#ADD8E6"
                  show={true}
                  animationDelay={delayTiming(0)}
                >
                  outgoing
                </RoughNotation>
                ,{" "}
                <RoughNotation
                  type="underline"
                  color="#ADD8E6"
                  show={true}
                  animationDelay={delayTiming(1)}
                >
                  highly motivated
                </RoughNotation>
                <RoughNotation
                  type="circle"
                  color="#ADD8E6"
                  show={true}
                  animationDelay={delayTiming(2)}
                >
                  , team worker
                </RoughNotation>{" "}
                ,with a strong ability for{" "}
                <RoughNotation
                  type="underline"
                  color="#ADD8E6"
                  show={true}
                  animationDelay={delayTiming(3)}
                >
                  communication{" "}
                </RoughNotation>
                and supporting the development of others. Highly technically
                competent , with a specific interest in data science, machine
                learning and problem-solving. An exceptional academic record and
                the{" "}
                <RoughNotation
                  type="circle"
                  color="#ADD8E6"
                  show={true}
                  animationDelay={delayTiming(4)}
                >
                  enthusiasm{" "}
                </RoughNotation>{" "}
                to adapt to new challenges. Currently studying a degree in
                Computer Science at the University of Bath.
              </p>
              <div className="grid gap-2 md:grid-cols-2">
                <div>
                  <h3 className="inline text-lg font-semibold">Name</h3>
                  <p>üßë‚ÄçüíªSolomon Wheeler</p>
                </div>
                <div>
                  <h3 className="inline text-lg font-semibold">Location</h3>
                  <p>üìåLondon/Bath, UK</p>
                </div>
                <div>
                  <h3 className="inline text-lg font-semibold">Email</h3>
                  <p>üìßhello@solomon.wheeler.co.uk</p>
                </div>
                <div>
                  <h3 className="inline text-lg font-semibold">Website</h3>
                  <p>üè°solomonwheeler.co.uk</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <section className="py-12 md:py-24 lg:py-32 xl:py-48" key="section2">
        <div className="container px-4 md:px-6">
          <div className="grid gap-8 md:gap-10">
            <div className="space-y-2">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                My Skills
              </h2>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
                I have a depth of understanding in succesfully building,
                testing, and deploying software applications.
              </p>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
                Here are some of languages and tools I have experience with:
              </p>
            </div>
            <div className="grid gap-4 md:gap-6 lg:gap-8" ref={ref}>
              <div className="grid gap-2 md:grid-cols-2">
                {row1Items.map((item, index) => (
                  <div
                    key={index}
                    className="inline-flex items-center space-x-2"
                  >
                    <RoughNotation
                      type="highlight"
                      color="#007BFF"
                      show={inView}
                      animationDelay={delayTiming(1)}
                    >
                      <item.Icon className="w-5 h-5" />
                    </RoughNotation>
                    <span className="font-medium">{item.name}</span>
                  </div>
                ))}
              </div>
              <div className="grid gap-2 md:grid-cols-2">
                {row2Items.map((item, index) => (
                  <div
                    key={index}
                    className="inline-flex items-center space-x-2"
                  >
                    <RoughNotation
                      type="highlight"
                      color="#007BFF"
                      show={inView}
                      animationDelay={delayTiming(1)}
                    >
                      <item.Icon className="w-5 h-5" />
                    </RoughNotation>
                    <span className="font-medium">{item.name}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </section>
      <section className="py-12 md:py-24 lg:py-32 xl:py-48" key="section3">
        <div className="container px-4 md:px-6">
          <div className="grid gap-8 md:gap-10">
            <div className="space-y-2">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                Qualifications
              </h2>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
                I am currently studying a degree in computer science at the
                University of Bath. Here are some of the modules I have studied:
              </p>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="p-4 bg-white shadow-md rounded-md dark:bg-gray-800">
                <h2 className="text-2xl font-bold">Modules</h2>
                {modules.map((module, index) => (
                  <li key={index}>{module.name}</li>
                ))}
              </div>
              <div className="p-4 bg-white shadow-md rounded-md dark:bg-gray-800">
                <h2 className="text-2xl font-bold">Marks</h2>
                {modules.map((module, index) => (
                  <li key={index}>{module.mark}%</li>
                ))}
              </div>
            </div>
            <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
              And I have the following other qualifications:
            </p>
          </div>
        </div>
      </section>
      <section
        className="bg-gray-50 dark:bg-gray-900 py-12 md:py-24 lg:py-32 xl:py-48"
        key="section4"
      >
        <div className="container px-4 md:px-6">
          <div className="space-y-4">
            <div className="space-y-2">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                My Projects
              </h2>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
                Here are some of the projects I‚Äôve been working on.
              </p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 lg:gap-8">
              <div className="p-4 bg-white shadow-md rounded-md dark:bg-gray-800">
                <Link className="font-medium underline" href="#">
                  Sudoku Solver
                </Link>
                <p className="text-sm text-gray-500">
                  A Sudoku solving implementation which models the Sudoku as a
                  constraint satisfaction problem, and uses a depth-first search
                  with backtracking to explore the search space.{" "}
                </p>
              </div>
              <div className="p-4 bg-white shadow-md rounded-md dark:bg-gray-800">
                <Link className="font-medium underline" href="#">
                  Spam Filtering
                </Link>
                <p className="text-sm text-gray-500">
                  A spam filter which used naive bayes based on number of
                  keywords, to predict wether an item was spam or not. It then
                  used k-fold cross validation on our training/test dataset to
                  workout a predicted accurary for the filter
                </p>
              </div>
              <div className="p-4 bg-white shadow-md rounded-md dark:bg-gray-800">
                <Link className="font-medium underline" href="#">
                  Graph & Minimum Spanning tree
                </Link>
                <p className="text-sm text-gray-500">
                  This program allows for the visualisation of directed and
                  undirected graphs, which can be randomly created or made by
                  the user. The program will then use Primm's algorithm to find
                  the minimum spanning tree for this graph from a specified node
                </p>
              </div>
              <div className="p-4 bg-white shadow-md rounded-md dark:bg-gray-800">
                <Link className="font-medium underline" href="#">
                  Mental Health Hackathon Project{" "}
                </Link>
                <p className="text-sm text-gray-500">
                  It lets you write messages to others when you are feeling
                  good, and get messages from others if you're having a rough
                  day. Includes tracking of how you're feeling over time, so you
                  can see your progress
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>
      <section className="py-12 md:py-24 lg:py-32 xl:py-48" key="section5">
        <div className="container px-4 md:px-6">
          <div className="grid gap-4 md:gap-6">
            <div className="space-y-2">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">
                Contact Me
              </h2>
              <p className="text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed dark:text-gray-400">
                {"Get in touch üòÄ"}
              </p>
            </div>
            <form className="grid gap-4 md:gap-6">
              <div className="grid gap-2">
                <Label className="text-sm" htmlFor="name">
                  Name
                </Label>
                <Input
                  id="name"
                  placeholder="Enter your name"
                  required
                  onChange={handleNameChange}
                />
              </div>
              <div className="grid gap-2">
                <Label className="text-sm" htmlFor="email">
                  Email
                </Label>
                <Input
                  id="email"
                  placeholder="Enter your email"
                  required
                  type="email"
                  onChange={handleEmailChange}
                />
              </div>
              <div className="grid gap-2">
                <Label className="text-sm" htmlFor="message">
                  Message
                </Label>
                <Textarea
                  id="message"
                  placeholder="Enter your message"
                  required
                  onChange={handleMsgChange}
                />
              </div>
              <Button type="submit" onClick={handleSubmit}>
                Submit
              </Button>
            </form>
          </div>
        </div>
      </section>
    </>
  );
}

function LayoutIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
      <line x1="3" x2="21" y1="9" y2="9" />
      <line x1="9" x2="9" y1="21" y2="9" />
    </svg>
  );
}

function ReactIcon(props: any) {
  return (
    <a
      title="Facebook, Public domain, via Wikimedia Commons"
      href="https://commons.wikimedia.org/wiki/File:React-icon.svg"
    >
      <img
        alt="React"
        src="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg"
        width="24"
        height="24"
        style={{ filter: "grayscale(50%)" }}
        {...props}
      />
    </a>
  );
}

function TypeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="4 7 4 4 20 4 20 7" />
      <line x1="9" x2="15" y1="20" y2="20" />
      <line x1="12" x2="12" y1="4" y2="20" />
    </svg>
  );
}

function PythonIcon(props: any) {
  return (
    <a
      title="The people from the Tango! project., CC BY-SA 3.0 &lt;https://creativecommons.org/licenses/by-sa/3.0&gt;, via Wikimedia Commons"
      href="https://commons.wikimedia.org/wiki/File:Python.svg"
    >
      <img
        alt="Python"
        src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Python.svg/32px-Python.svg.png?20101018043057"
        width="24"
        height="24"
        style={{ filter: "grayscale(50%)" }}
        {...props}
      />
    </a>
  );
}

function NestJSIcon(props: any) {
  return (
    <a
      title="NestJS, Public domain, via Wikimedia Commons"
      href="https://commons.wikimedia.org/wiki/File:NestJS.svg"
    >
      <img
        alt="NestJS"
        src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/NestJS.svg/512px-NestJS.svg.png?20221211225055"
        width="24"
        height="24"
        style={{ filter: "grayscale(50%)" }}
        {...props}
      />
    </a>
  );
}

function NavigationIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="3 11 22 2 13 21 11 13 3 11" />
    </svg>
  );
}

function GithubIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
      <path d="M9 18c-4.51 2-5-2-7-2" />
    </svg>
  );
}

function CodeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="16 18 22 12 16 6" />
      <polyline points="8 6 2 12 8 18" />
    </svg>
  );
}

function CIcon(props: any) {
  return (
    <a
      title="ElodinKaldwin, Public domain, via Wikimedia Commons"
      href="https://commons.wikimedia.org/wiki/File:C_Programming_Language.svg"
    >
      <img
        alt="CIcon"
        src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/C_Programming_Language.svg/256px-C_Programming_Language.svg.png?20201031132917"
        width="24"
        height="24"
        style={{ filter: "grayscale(50%)" }}
        {...props}
      />
    </a>
  );
}

function KubernetesIcon(props: any) {
  return (
    <a
      title="Google, Public domain, via Wikimedia Commons"
      href="https://commons.wikimedia.org/wiki/File:Kubernetes_logo_without_workmark.svg"
    >
      <img
        alt="KubernetesIcon"
        src="https://upload.wikimedia.org/wikipedia/commons/3/39/Kubernetes_logo_without_workmark.svg"
        width="24"
        height="24"
        style={{ filter: "grayscale(50%)" }}
        {...props}
      />
    </a>
  );
}
function JavaSciptIcon(props: any) {
  return (
    <a
      title="Christopher Williams, Public domain, via Wikimedia Commons"
      href="https://commons.wikimedia.org/wiki/File:JavaScript-logo.png"
    >
      <img
        alt="JavaScrptIcon"
        src="https://upload.wikimedia.org/wikipedia/commons/6/6a/JavaScript-logo.png"
        width="24"
        height="24"
        style={{ filter: "grayscale(50%)" }}
        {...props}
      />
    </a>
  );
}
